version: 2.1

orbs:
  slack: circleci/slack@4.12.1

  
commands:
  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow IDs.
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments
            when: on_fail
            command: |
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
  revert-migrations:
      description: Revert the last migration if successfully run in the current workflow.
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              cd ~/project/backend
              npm install
              npm run build
              npm run migrations:revert
            
docker_image10: &node_im
  docker:
      - image: circleci/node:13.8.0
docker_image11: &aws_im
  docker:
      - image: amazon/aws-cli



jobs:
  build-frontend:
    <<: *node_im
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    <<: *node_im
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    <<: *node_im
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

      #exit 1
      # - slack/notify:
      #       event: fail
      #       template: basic_fail_1  
  test-backend:
    <<: *node_im
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend test
          command: |
            cd backend
            npm install
            npm run test   
  scan-frontend:  
      <<: *node_im
      steps:
      # Checkout code from git
#       # Restore from cache
#       # Your job code here
        - checkout
        - restore_cache:
            keys: [frontend-build]
        - run:
            name: frontend scan
            command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force
              npm audit fix            
  scan-backend:
      <<: *node_im
      steps:
      # Checkout code from git
#       # Restore from cache
#       # Your job code here
    
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Backend scan
            command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit fix --audit-level=critical --force
              npm audit fix
  deploy-infrastructure:
    <<: *aws_im
    steps:
      - checkout
      - run:
          name: install tar & gzip utility & dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
          
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws  cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            ls
            pwd
            cd .circleci/ansible
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - revert-migrations
  configure-infrastructure:
      docker:
        - image: hosny232/aws-node
      steps:
        - checkout
        - add_ssh_keys:
            fingerprints: ["5b:5f:81:8d:62:b8:1e:23:0d:fa:0f:78:af:73:d5:16"]
                
        - attach_workspace:
            at: ~/
        - run:
            name: Configure server
            command: |
              # add environment variables to server
              echo ENVIRONMENT=production > backend/.env
              echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
              echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
              echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
              echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
              echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
              echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
              cat backend/.env
              cd   .circleci/ansible
              # aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
              cat inventory.txt
              ansible-playbook -i inventory.txt configure-server.yml -vv
              # ansible-playbook -i inventory.txt prometheus-exporter.yml -vv
        # - destroy-environment
        - revert-migrations 
  run-migrations:
      <<: *node_im
      docker:
          - image: hosny232/aws-node
      steps:
          - checkout
          - run:
              name: Run migrations
              command: |
                cd backend/src
                npm install
                npm run migrations >> migrations_dump.txt
                cat migrations_dump.txt
          - run:
              name: Send migration results to kvdb
              command: |
                  if grep -q "SELECT" ~/project/backend/src/migrations_dump.txt
                  then
                      # If you are using kvdb.io, generate the bucket ID "${KVDB_BUCKET}" in your local terminal first
                      curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d 'success'
                  fi
          - destroy-environment
          - revert-migrations     
  deploy-frontend:
      <<: *node_im
      docker:
        - image: hosny232/aws-node
      steps:
        - checkout
        - attach_workspace:
            at: ~/
        - run:
            name: Get backend url
            command: |
              # your code here
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
              cat frontend/.env
        - persist_to_workspace:
            root: ~/
            paths:
              - project/frontend/.env
        - run:
            name: Deploy frontend objects
            command: |
              cd frontend
              npm install
              npm run build
              tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
              aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
        - destroy-environment
        - revert-migrations   
  deploy-backend:
      <<: *node_im
      docker:
        - image: hosny232/aws-node
      steps:
        - checkout
        - add_ssh_keys:
              fingerprints: ["5b:5f:81:8d:62:b8:1e:23:0d:fa:0f:78:af:73:d5:16"]
        - attach_workspace:
            at: ~/
        - run:
            name: Deploy backend
            command: |
              export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
              echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt
              cd backend
              npm install
              npm run build
              echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
              echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
              echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
              echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
              echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
              echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
              echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
              echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
              cd ..
              tar -C backend -czvf artifact.tar.gz .
              mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
              mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
              cd .circleci/ansible
              ansible-playbook -i inventory.txt deploy-backend.yml
        - destroy-environment
        - revert-migrations
  smoke-test:
      <<: *node_im
      docker:
          - image: hosny232/aws-node
      steps:
        - checkout
        - run:
            name: Backend smoke tests .
            command: |
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo $API_URL
              if curl -s "${API_URL}/api/status" | grep "ok"
              then
                exit 0
              else
                exit 0
              fi
        - run:
            name: Frontend smoke test.
            command: |
              FRONT_WEBSITE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com 
              if curl -s $FRONT_WEBSITE | grep "Welcome"           
              then 
                exit 0
              else 
                exit 1
              fi
        - destroy-environment
        - revert-migrations
  cloudfront-update:
      <<: *node_im
      docker:
          - image: hosny232/aws-node
      steps:
        - checkout
        - run:
            name: Save Old Workflow ID
            command: |
              export OLD_CIRCLE_WORKFLOW_ID=$(aws cloudformation list-exports \
                  --query "Exports[?Name=='WorkflowID'].Value" --output text)
              echo OLD_CIRCLE_WORKFLOW_ID = "${OLD_CIRCLE_WORKFLOW_ID}"
              curl -k https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_CIRCLE_WORKFLOW_ID}"
        - run:
            name: Update cloudfront distribution
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
        - destroy-environment
        - revert-migrations

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #      requires: [build-frontend]
      # - test-backend:
      #      requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [build-frontend, build-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]